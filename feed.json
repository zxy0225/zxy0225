{
    "version": "https://jsonfeed.org/version/1",
    "title": "Hexo",
    "description": "",
    "home_page_url": "https://zhan-xiaoye.gitee.io/myhexo",
    "items": [
        {
            "id": "https://zhan-xiaoye.gitee.io/myhexo/2021/04/21/Python%E9%83%A8%E5%88%86/",
            "url": "https://zhan-xiaoye.gitee.io/myhexo/2021/04/21/Python%E9%83%A8%E5%88%86/",
            "title": "Python部分",
            "date_published": "2021-04-21T11:16:05.000Z",
            "content_html": "<h1 id=\"python部分\"><a class=\"markdownIt-Anchor\" href=\"#python部分\">#</a> Python 部分</h1>\n<h4 id=\"25什么是深浅拷贝如何实现\"><a class=\"markdownIt-Anchor\" href=\"#25什么是深浅拷贝如何实现\">#</a> 2.5 什么是深浅拷贝，如何实现</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">浅拷贝:copy.copy()\t  只拷贝第一层,不会拷贝深层次,修改第一层不会改变,修改深层次就会互相影响了.\t  注意:切片操作也可以实现浅拷贝哦.深拷贝:copy.deepcopy()\t  是即递归性质的浅拷贝,他会在内存中生成一套于完全一样的内容,修改其中一个变量,不会影响另一个.\t  也就说,深拷贝就是所有数据重新创建.</span><br></pre></td></tr></table></figure>\n<h4 id=\"26您能说说python自省吗\"><a class=\"markdownIt-Anchor\" href=\"#26您能说说python自省吗\">#</a> 2.6 您能说说 python 自省吗</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">自省就是程序运行期间能够获得对象的类型.函数有:dir:获取当前对象内部的属性.type:获取当前对象的类型.hasattr:获取当前对象是否包含某个属性.isinstance:判断对象是否是某个类的实例.</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"3数据类型\"><a class=\"markdownIt-Anchor\" href=\"#3数据类型\">#</a> 3. 数据类型</h3>\n<h4 id=\"31您知道python中的数据类型吗\"><a class=\"markdownIt-Anchor\" href=\"#31您知道python中的数据类型吗\">#</a> 3.1 您知道 Python 中的数据类型吗？</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python的数据类型分为可变和不可变两大类\t可变: 列表(list) 集合(set) 字典(dict)\t不可变: 数字(number) 字符串(string) 元组(tuple) 不可变集合(frozenset)为什么可变和不可变?可变数据类类型:变量引用的数据类型,更值后,存在开不辟新内存的行为不可变数据类型:变量引用的数据类型,更值后,不存在不开辟新内存的行为</span><br></pre></td></tr></table></figure>\n<h4 id=\"32您能说说列表和元组的区别吗\"><a class=\"markdownIt-Anchor\" href=\"#32您能说说列表和元组的区别吗\">#</a> 3.2 您能说说列表和元组的区别吗？</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">相同点: 都是序列类型       列表与元组都是序列型的容器对象,可以存放任何类型的数据,支持切片,迭代等操作.不同点: (1)不可变和可变\t\t两种类型除了(括号与方括号),最重要的是元组是不可变集合,大小固定,列表是可变数据类型,数据可以动态变化,这种差异导致两者提供的方法,应用场景还有性能上很大区别.\t   (2)同构和异构\t\t元组用于存储异构数据,当做没有字段名的记录来使用,比如&#96;个人信息,\t\t列表一般用于存储同构数据,同构数据就是具有相同意义的数据.比如都是字符串类型.</span><br></pre></td></tr></table></figure>\n<h4 id=\"33你能完美详细的说说字典的底层吗\"><a class=\"markdownIt-Anchor\" href=\"#33你能完美详细的说说字典的底层吗\">#</a> 3.3 你能完美详细的说说字典的底层吗？</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"4内存管理\"><a class=\"markdownIt-Anchor\" href=\"#4内存管理\">#</a> 4. 内存管理</h3>\n<h4 id=\"41您懂引用记数吗\"><a class=\"markdownIt-Anchor\" href=\"#41您懂引用记数吗\">#</a> 4.1 您懂引用记数吗？</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">当一个对像的引用被创建或复制时,改引记数+1.当一个对象的引用被销毁时,改引记数-1.当引记减少为0时,就意味着没有没被使用,可以将其内存释放掉了.</span><br></pre></td></tr></table></figure>\n<h4 id=\"42您懂标记-清除吗\"><a class=\"markdownIt-Anchor\" href=\"#42您懂标记-清除吗\">#</a> 4.2 您懂标记 - 清除吗？</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">分为两个阶段:第一个阶段会把所有活动的对象打上标记,第二个阶段会把那些没有标记的对象进行回收.</span><br></pre></td></tr></table></figure>\n<h4 id=\"43您懂分代回收吗\"><a class=\"markdownIt-Anchor\" href=\"#43您懂分代回收吗\">#</a> 4.3 您懂分代回收吗？</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">分代回收建立是在标记清除的基础上的,是以空间换时间的操作方式.分代回收就是将回收对象分为数个代:青年代,中年代,老年代当青年代满时,将触发清理所有三个代,执行标记清除动作.之后,中年代满时,将触发清理中年代,老年代;最后老年代满时,触发只会处理清除自己.注意:老年代是存活时间最长的.</span><br></pre></td></tr></table></figure>",
            "tags": []
        },
        {
            "id": "https://zhan-xiaoye.gitee.io/myhexo/2021/04/21/zhu3/",
            "url": "https://zhan-xiaoye.gitee.io/myhexo/2021/04/21/zhu3/",
            "title": "zhu3",
            "date_published": "2021-04-21T07:46:36.000Z",
            "content_html": "<p>#helloooooooooooooooooooo</p>\n",
            "tags": []
        },
        {
            "id": "https://zhan-xiaoye.gitee.io/myhexo/2021/04/18/zhu2/",
            "url": "https://zhan-xiaoye.gitee.io/myhexo/2021/04/18/zhu2/",
            "title": "zhu2",
            "date_published": "2021-04-18T12:07:17.000Z",
            "content_html": "<p>#helloooooooooooooooooooo</p>\n",
            "tags": []
        }
    ]
}